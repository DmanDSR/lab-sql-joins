use sakila;


select * 
from film;

-- List the number of films per category.

SELECT c.name AS category, COUNT(f.film_id) AS num_films
FROM film_category AS fc 
JOIN film as f 
ON fc.film_id = f.film_id
JOIN category AS c 
ON fc.category_id = c.category_id
GROUP BY c.name;

-- Retrieve the store ID, city, and country for each store.
SELECT *
FROM country;

SELECT st.store_id AS 'Store ID', ci.city, co.country
FROM store AS st
JOIN address as a
ON a.city_id = st.address_id
JOIN city AS ci
ON a.address_id = ci.city_id
JOIN country AS co
ON ci.city_id = co.country_id
ORDER BY store_id;

-- Calculate the total revenue generated by each store in dollars.

SELECT st.store_id AS 'Store ID', ROUND(SUM(p.amount)) AS "Total Revenue"
FROM store AS st 
JOIN address as a
ON st.store_id = a.address_id
JOIN Staff as sta
ON sta.store_id = st.store_id
JOIN payment AS p
ON p.staff_id = sta.staff_id 
GROUP BY st.store_id;

-- Determine the average running time of films for each category.

SELECT c.name, ROUND(AVG(f.length), 2 ) AS ' average running time'
from film as f
JOIN film_category as fc
ON f.film_id = fc.film_id
JOIN category as c
ON fc.category_id = c.category_id
GROUP BY c.name;

-- Bonus:

-- Identify the film categories with the longest average running time.

SELECT c.name, ROUND(AVG(f.length), 2 ) AS 'average running time'
from film as f
JOIN film_category as fc
ON f.film_id = fc.film_id
JOIN category as c
ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY AVG(f.length) DESC;

-- Display the top 10 most frequently rented movies in descending order.
-- Determine if "Academy Dinosaur" can be rented from Store 1.

-- Provide a list of all distinct film titles, along with their availability -
-- status in the inventory. Include a column indicating whether each title is -
-- 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, -
-- and this information can be obtained using a CASE statement combined with IFNULL."
